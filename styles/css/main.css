/* Vendors */
/*! normalize.css v2.1.3 | MIT License | git.io/normalize */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined in IE 8/9.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}

/**
 * Correct `inline-block` display not defined in IE 8/9.
 */
audio,
canvas,
video {
  display: inline-block;
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9.
 * Hide the `template` element in IE, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* ==========================================================================
   Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* ==========================================================================
   Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent;
}

/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0;
}

/* ==========================================================================
   Typography
   ========================================================================== */
/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Correct font family set oddly in Safari 5 and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em;
}

/**
 * Improve readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre-wrap;
}

/**
 * Set consistent quote types.
 */
q {
  quotes: "\201C" "\201D" "\2018" "\2019";
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* ==========================================================================
   Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0;
}

/**
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden;
}

/* ==========================================================================
   Figures
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 0;
}

/* ==========================================================================
   Forms
   ========================================================================== */
/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
button,
input,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */
}

/* ==========================================================================
   Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

html {
  box-sizing: border-box;
}

*, *::after, *::before {
  box-sizing: inherit;
}

.clear {
  *zoom: 1;
}

.clear:before, .clear:after {
  content: ' ';
  display: table;
}

.clear:after {
  clear: both;
}

.wrapper {
  max-width: 1280px;
  width: 95%;
  margin: 0 auto;
  position: relative;
}

img {
  max-width: 100%;
  vertical-align: bottom;
}

.device-background {
  background: url("https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/mountains.png"), -webkit-linear-gradient(80deg, #0A120D, #162C4C), no-repeat #162C4C scroll;
  background: url("https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/mountains.png"), linear-gradient(10deg, #0A120D, #162C4C), no-repeat #162C4C scroll;
  background-repeat: no-repeat;
  background-size: cover;
  min-height: 20em;
  width: 100%;
  margin-top: 10em;
  margin-bottom: 15em;
}

.device-background .device-text {
  padding: 2em;
}

@media screen and (min-width: 53.75em) {
  .device-background .device-text {
    float: left;
    max-width: 50%;
    padding: 4em;
  }
}

.device-background .device-text h4 {
  border-bottom: 1px solid rgba(255, 255, 255, 0.3);
  color: white;
  font-size: 1.5em;
  margin: 0 0 0.5em 0;
  padding-bottom: 0.5em;
}

.device-background .device-text p {
  color: white;
  line-height: 1.5em;
  margin-bottom: 1.5em;
}

.device-background .device {
  display: none;
  position: relative;
}

@media screen and (min-width: 53.75em) {
  .device-background .device {
    background: #1a1a1a;
    border-radius: 2em;
    box-shadow: 1px 0 #343434, 4px 0 #060606, 7px 0 #010101, 10px 0 #010101, 13px 0 #010101;
    display: block;
    float: right;
    margin-bottom: -12em;
    margin-right: 5em;
    padding: 5em 0;
    -webkit-transform: perspective(800px) translateX(0) translateY(-100px) translateZ(50px) rotateX(0) rotateY(-20deg) rotateZ(0);
            transform: perspective(800px) translateX(0) translateY(-100px) translateZ(50px) rotateX(0) rotateY(-20deg) rotateZ(0);
    width: 14.8em;
    z-index: 99999;
  }
  .device-background .device .screen {
    height: 25em;
    width: 14em;
    background-image: url("https://raw.githubusercontent.com/thoughtbot/refills/master/source/images/cosmin_capitanu_screen.jpg");
    background-size: cover;
    border-radius: 0.2em;
    box-shadow: inset 0 1px 8px rgba(0, 0, 0, 0.5);
    margin: auto;
  }
}

.flex-boxes {
  -webkit-box-align: stretch;
      -ms-flex-align: stretch;
          align-items: stretch;
  clear: both;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  text-align: center;
}

.flex-boxes::after {
  clear: both;
  content: "";
  display: block;
}

.flex-boxes .flex-box {
  -ms-flex-item-align: stretch;
      -ms-grid-row-align: stretch;
      align-self: stretch;
  background: #f7f7f7;
  border-radius: 3px;
  box-shadow: inset 0 0 1px #DDD, 0 2px 4px #e6e6e6;
  display: block;
  -webkit-box-flex: 2;
      -ms-flex: 2 2 15em;
          flex: 2 2 15em;
  margin: 0.4em;
  padding: 2em 2em 3em 2em;
  text-decoration: none;
  -webkit-transition: all 0.2s ease-in-out;
  transition: all 0.2s ease-in-out;
}

.flex-boxes .flex-box:nth-child(1) {
  border-top: 6px solid tomato;
}

.flex-boxes .flex-box:nth-child(1):focus, .flex-boxes .flex-box:nth-child(1):hover {
  background-color: rgba(255, 99, 71, 0.1);
}

.flex-boxes .flex-box:nth-child(2) {
  border-top: 6px solid #72BFBF;
}

.flex-boxes .flex-box:nth-child(2):focus, .flex-boxes .flex-box:nth-child(2):hover {
  background-color: rgba(114, 191, 191, 0.1);
}

.flex-boxes .flex-box:nth-child(3) {
  border-top: 6px solid #92B1E3;
}

.flex-boxes .flex-box:nth-child(3):focus, .flex-boxes .flex-box:nth-child(3):hover {
  background-color: rgba(146, 177, 227, 0.1);
}

.flex-boxes .flex-box:nth-child(4) {
  border-top: 6px solid #E3D743;
}

.flex-boxes .flex-box:nth-child(4):focus, .flex-boxes .flex-box:nth-child(4):hover {
  background-color: rgba(227, 215, 67, 0.1);
}

.flex-boxes .flex-box:nth-child(5) {
  border-top: 6px solid #CCC;
}

.flex-boxes .flex-box:nth-child(5):focus, .flex-boxes .flex-box:nth-child(5):hover {
  background-color: rgba(204, 204, 204, 0.1);
}

.flex-boxes .flex-box:nth-child(6) {
  border-top: 6px solid #F6C05C;
}

.flex-boxes .flex-box:nth-child(6):focus, .flex-boxes .flex-box:nth-child(6):hover {
  background-color: rgba(246, 192, 92, 0.1);
}

.flex-boxes .flex-box img {
  display: block;
  height: 3em;
  margin: 0 auto 1em;
  opacity: 0.4;
}

.flex-boxes .flex-box .flex-title {
  color: rgba(51, 51, 51, 0.7);
  font-size: 1.2em;
  margin-bottom: 0.5em;
}

.flex-boxes .flex-box p {
  color: rgba(51, 51, 51, 0.6);
  line-height: 1.5em;
  margin: auto;
}

.flex-boxes .flex-box-big {
  -webkit-box-flex: 1;
      -ms-flex: 1 1 40em;
          flex: 1 1 40em;
}

.footer {
  background: #40526b;
  padding: 3em 1.618em;
  width: 100%;
}

.footer .footer-logo {
  margin-bottom: 2em;
  text-align: center;
}

.footer .footer-logo img {
  height: 3em;
}

.footer .footer-links {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  margin-bottom: 1.5em;
}

.footer ul {
  -ms-flex-preferred-size: 13em;
      flex-basis: 13em;
  -ms-flex-negative: 0;
      flex-shrink: 0;
  margin-bottom: 3em;
  padding: 0;
}

.footer li {
  line-height: 1.5em;
  list-style: none;
  text-align: center;
}

.footer li a {
  color: rgba(255, 255, 255, 0.4);
  text-decoration: none;
}

.footer li a:focus, .footer li a:hover {
  color: white;
}

.footer li h3 {
  color: white;
  font-size: 1em;
  margin-bottom: 0.4em;
}

.footer hr {
  border: 1px solid rgba(255, 255, 255, 0.1);
  margin: 0 auto 1.5em;
  width: 12em;
}

.footer p {
  color: rgba(255, 255, 255, 0.4);
  font-size: 0.9em;
  line-height: 1.5em;
  margin: auto;
  max-width: 35em;
  text-align: center;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
